# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sRTAcvQswPAJxWNBb5QirvXojUAPcqux
"""

CodePreview
import { useState } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Textarea } from "/components/ui/textarea"
import { Mail, Briefcase, User, Tag, AlertTriangle } from "lucide-react"

type Category = {
  id: string
  name: string
  icon: React.ReactNode
  color: string
  bgColor: string
}

export default function EmailClassifier() {
  const [emailContent, setEmailContent] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [classification, setClassification] = useState<Category | null>(null)

  const categories: Category[] = [
    {
      id: 'work',
      name: 'Work',
      icon: <Briefcase className="w-4 h-4" />,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100'
    },
    {
      id: 'personal',
      name: 'Personal',
      icon: <User className="w-4 h-4" />,
      color: 'text-green-600',
      bgColor: 'bg-green-100'
    },
    {
      id: 'promotions',
      name: 'Promotions',
      icon: <Tag className="w-4 h-4" />,
      color: 'text-purple-600',
      bgColor: 'bg-purple-100'
    },
    {
      id: 'spam',
      name: 'Spam',
      icon: <AlertTriangle className="w-4 h-4" />,
      color: 'text-red-600',
      bgColor: 'bg-red-100'
    }
  ]

  const classifyEmail = () => {
    if (!emailContent.trim()) {
      setError('Please enter email content')
      return
    }

    setIsLoading(true)
    setError('')
    setClassification(null)

    // Simulate AI processing delay
    setTimeout(() => {
      // Mock classification based on content keywords
      const content = emailContent.toLowerCase()
      let category: Category

      if (content.includes('meeting') || content.includes('project') || content.includes('team')) {
        category = categories[0] // Work
      } else if (content.includes('dear') || content.includes('family') || content.includes('friend')) {
        category = categories[1] // Personal
      } else if (content.includes('sale') || content.includes('discount') || content.includes('offer')) {
        category = categories[2] // Promotions
      } else {
        category = categories[3] // Spam
      }

      setClassification(category)
      setIsLoading(false)
    }, 1500)
  }

  const clearAll = () => {
    setEmailContent('')
    setClassification(null)
    setError('')
  }

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Mail className="w-6 h-6" />
          <span>Smart Email Classifier</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <Textarea
              value={emailContent}
              onChange={(e) => setEmailContent(e.target.value)}
              placeholder="Paste your email content here..."
              className="min-h-[200px]"
            />
            {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
          </div>

          <div className="flex flex-wrap gap-2">
            <Button onClick={classifyEmail} disabled={isLoading}>
              {isLoading ? 'Classifying...' : 'Classify Email'}
            </Button>
            <Button variant="outline" onClick={clearAll}>
              Clear
            </Button>
          </div>

          {classification && (
            <div className="mt-6">
              <h3 className="text-lg font-medium mb-2">Classification Result</h3>
              <div className={`flex items-center gap-3 p-4 rounded-lg ${classification.bgColor}`}>
                <div className={`p-2 rounded-full ${classification.bgColor} ${classification.color}`}>
                  {classification.icon}
                </div>
                <div>
                  <p className="text-sm text-gray-500">This email is categorized as:</p>
                  <p className={`font-semibold ${classification.color}`}>{classification.name}</p>
                </div>
              </div>
            </div>
          )}

          <div className="mt-8">
            <h3 className="text-lg font-medium mb-3">Categories</h3>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
              {categories.map((category) => (
                <div
                  key={category.id}
                  className={`flex items-center gap-2 p-3 rounded-lg ${category.bgColor}`}
                >
                  <div className={`p-1 rounded-full ${category.bgColor} ${category.color}`}>
                    {category.icon}
                  </div>
                  <span className={`text-sm font-medium ${category.color}`}>{category.name}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}